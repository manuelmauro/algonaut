/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

use algonaut_encoding::Bytes;

/// TransactionSignatureLogicsig : \\[lsig\\] Programatic transaction signature.  Definition: data/transactions/logicsig.go

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TransactionSignatureLogicsig {
    /// \\[arg\\] Logic arguments, base64 encoded.
    #[serde(rename = "args", skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// \\[l\\] Program signed by a signature or multi signature, or hashed to be the address of ana ccount. Base64 encoded TEAL program.
    #[serde(rename = "logic")]
    pub logic: Bytes,
    #[serde(rename = "multisig-signature", skip_serializing_if = "Option::is_none")]
    pub multisig_signature: Option<Box<crate::models::TransactionSignatureMultisig>>,
    /// \\[sig\\] ed25519 signature.
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<Bytes>,
}

impl TransactionSignatureLogicsig {
    /// \\[lsig\\] Programatic transaction signature.  Definition: data/transactions/logicsig.go
    pub fn new(logic: Bytes) -> TransactionSignatureLogicsig {
        TransactionSignatureLogicsig {
            args: None,
            logic,
            multisig_signature: None,
            signature: None,
        }
    }
}
